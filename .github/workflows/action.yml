name: Generate Wiki from Code

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write

jobs:
  call-adapts-api:
    if: github.event_name == 'push' || github.event.pull_request.merged == true      # trigger on direct commits or PR merges
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install runtime deps
        run: |
          pip install --upgrade pip requests adaptsapi
          # gh CLI comes pre‑installed on GitHub‑hosted runners

      # ───────────────────── Fetch developer e‑mail ─────────────────────
      - name: Get author e-mail (enterprise)
        id: pr_author
        env:
          GH_TOKEN: ${{ secrets.ENTERPRISE_READ_TOKEN }}   # PAT or App token with read:org
        run: |
          # Handle both push and pull_request events
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            login="${{ github.event.pull_request.user.login }}"
            org="${{ github.repository_owner }}"

            # Single-line GraphQL avoids the UNKNOWN_CHAR error
            email=$(gh api graphql \
                -f query='query($login:String!,$org:String!){user(login:$login){organizationVerifiedDomainEmails(login:$org)}}' \
                -f login="$login" \
                -f org="$org" \
                --jq '.data.user.organizationVerifiedDomainEmails[0]')

            # Fallback to HEAD-commit author e-mail if nothing came back
            if [ -z "$email" ] || [ "$email" = "null" ]; then
              sha="${{ github.event.pull_request.head.sha }}"
              email=$(git show -s --format='%ae' "$sha")
            fi
          else
            # For push events, use the commit author email
            email=$(git show -s --format='%ae' "${{ github.sha }}")
          fi

          echo "email=$email" >>"$GITHUB_OUTPUT"

      - name: Get repo size
        id: repo_size
        run: |
          size=$(git ls-files | xargs cat | wc -c)
          echo "size=${size:-0}" >> $GITHUB_OUTPUT

      # ───────────────────── Call Adapts API ─────────────────────
      - name: Invoke Adapts API
        env:
          ADAPTS_API_KEY: ${{ secrets.ADAPTS_API_KEY }}
          AUTHOR_EMAIL:   ${{ steps.pr_author.outputs.email }}
          REPO_LANG:      ${{ steps.repo_lang.outputs.language }}
          REPO_SIZE:      ${{ steps.repo_size.outputs.size }}
          REFRESH_TOKEN:  ${{ secrets.GITHUB_TOKEN }}
          PAT: ${{secrets.ENTERPRISE_READ_TOKEN}}
        run: |
          python <<'PY'
          import os, json
          from adaptsapi.generate_docs import post, PayloadValidationError

          repo_full = os.getenv("GITHUB_REPOSITORY")
          repo_name = repo_full.split("/")[-1]
          repo_url  = f"https://github.com/{repo_full}"
          branch    = os.getenv("GITHUB_REF_NAME")

          payload = {
              "email_address": os.getenv("AUTHOR_EMAIL"),
              "user_name": os.getenv("GITHUB_ACTOR"),
              "repo_object": {
                  "repository_name": repo_name,
                  "source": "github",
                  "repository_url": repo_url,
                  "branch": branch,
                  "size": os.getenv("REPO_SIZE"),
                  "language": os.getenv("REPO_LANG") or "Unknown",
                  "is_private": True,
                  "git_provider_type": "github",
                  "refresh_token": os.getenv("REFRESH_TOKEN"),
                  "personal_access_token": os.environ["PAT"]
              },
          }

          try:
              resp = post(
                  "https://ycdwnfjohl.execute-api.us-east-1.amazonaws.com/prod/generate_wiki_docs",
                  os.environ["ADAPTS_API_KEY"],
                  payload,
              )
              resp.raise_for_status()
              print("✅ Success:", json.dumps(resp.json(), indent=2))
          except PayloadValidationError as e:
              print("❌ Invalid payload:", e)
              raise
          except Exception as e:
              print("❌ Request failed:", e)
              raise
          PY